{"version":3,"sources":["components/Card.tsx","utils/generateCards.ts","components/Finish.tsx","App.tsx","index.tsx"],"names":["Card","guessed","id","letter","showCard","handleClick","className","onClick","generateCards","letters","toUpperCase","split","sort","Math","random","Finish","setCards","setFinish","map","index","App","useState","cards","previous","setPrevious","finish","useEffect","remaining","length","filter","c","handleCardClick","undefined","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9588ab94.chunk.js","sourcesContent":["interface Props {\n  id: number;\n  guessed: boolean;\n  letter: string;\n  showCard: boolean;\n  handleClick: (id: number, letter: string) => void;\n}\n\nfunction Card({ guessed, id, letter, showCard, handleClick }: Props) {\n  return (\n    <div\n      className={`card ${showCard ? \"show\" : \"\"}`}\n      onClick={() => {\n        if (!guessed) {\n          handleClick(id, letter);\n        }\n      }}\n    >\n      {showCard ? letter : \"Â¿?\"}\n    </div>\n  );\n}\n\nexport default Card;\n","export const generateCards = (): string[] => {\n  const letters = \"abcdefghijklmnop\";\n  const letters2 = letters + letters;\n  const mixedLetters = letters2\n    .toUpperCase()\n    .split(\"\")\n    .sort(() => Math.random() - Math.random());\n\n  return mixedLetters;\n};\n","import { GuessCard } from \"../App\";\nimport { generateCards } from \"../utils/generateCards\";\n\ninterface Props {\n  setFinish: React.Dispatch<React.SetStateAction<boolean>>;\n  setCards: React.Dispatch<React.SetStateAction<GuessCard[]>>;\n}\n\nfunction Finish({ setCards, setFinish }: Props) {\n  const handleYes = () => {\n    const letters = generateCards();\n    setCards(\n      letters.map((letter, index) => {\n        return {\n          letter,\n          guessed: false,\n          id: index,\n          showCard: false,\n        };\n      })\n    );\n\n    setFinish(false);\n  };\n\n  const handleNo = () => {\n    setFinish(false);\n  };\n\n  return (\n    <div className=\"finish\">\n      Comenzar de nuevo?\n      <div className=\"buttons\">\n        <button onClick={handleYes}>Si</button>{\" \"}\n        <button onClick={handleNo}>No</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Finish;\n","import { useEffect, useState } from \"react\";\nimport Card from \"./components/Card\";\nimport Finish from \"./components/Finish\";\nimport { generateCards } from \"./utils/generateCards\";\n\nexport interface GuessCard {\n  letter: string;\n  id: number;\n  showCard: boolean;\n  guessed: boolean;\n}\n\nfunction App() {\n  const [cards, setCards] = useState<GuessCard[]>([]);\n  const [previous, setPrevious] = useState<{ id: number; letter: string }>();\n  const [finish, setFinish] = useState(false);\n\n  useEffect(() => {\n    const letters = generateCards();\n    setCards(\n      letters.map((letter, index) => {\n        return {\n          letter,\n          guessed: false,\n          id: index,\n          showCard: false,\n        };\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    let remaining;\n    if (cards.length > 0) {\n      remaining = cards.filter((c) => c.guessed === false).length;\n    }\n\n    if (remaining === 0) {\n      setFinish(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (id: number, letter: string) => {\n    //if there's no previous card selected\n    if (!previous) {\n      //set current selected card as previous\n      setPrevious({ id, letter });\n\n      //update cards to show selected card\n      setCards(\n        cards.map((c) => {\n          if (c.id === id) {\n            return { ...c, showCard: true };\n          }\n\n          return c;\n        })\n      );\n    } else {\n      //if the previous card is the same the user selects, do nothing\n      if (previous.id === id) return;\n\n      //if the previous card has the same letter set the two as guessed\n      if (previous.letter === letter) {\n        setCards(\n          cards.map((c) => {\n            if (c.id === previous.id) {\n              return { ...c, guessed: true };\n            }\n\n            if (c.id === id) {\n              return { ...c, guessed: true, showCard: true };\n            }\n\n            return c;\n          })\n        );\n\n        //then set the previous as undefined\n        setPrevious(undefined);\n\n        return;\n      }\n\n      //if the previous letter is not equal to the selected letter\n      //set the current card visible\n      if (previous.letter && previous?.letter !== letter) {\n        setCards(\n          cards.map((c) => {\n            if (c.id === id) {\n              return { ...c, showCard: true };\n            }\n\n            return c;\n          })\n        );\n\n        //then wait .5seconds and hide both cards\n        setTimeout(() => {\n          setCards(\n            cards.map((c) => {\n              if (c.id === id) {\n                return { ...c, showCard: false };\n              }\n\n              if (c.id === previous?.id) {\n                return { ...c, showCard: false };\n              }\n\n              return c;\n            })\n          );\n        }, 500);\n\n        //set previous to undefined\n        setPrevious(undefined);\n      }\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Memoria</h2>\n      {finish ? <Finish setFinish={setFinish} setCards={setCards} /> : null}\n      <div className=\"cards-container\">\n        {cards.map((c) => (\n          <Card\n            key={c.id}\n            id={c.id}\n            showCard={c.showCard}\n            guessed={c.guessed}\n            letter={c.letter}\n            handleClick={handleCardClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}